#################################################
#      GiD-Tcl procedures invoked by GiD        #
#################################################
proc GiD_Event_InitProblemtype { dir } {
    Ermes::SetDir $dir ;#store to use it later
    Ermes::ModifyMenus
    gid_groups_conds::open_conditions menu
    Ermes::CreateWindow  ;#create a window as Tcl example (random surface creation)       
}

proc GiD_Event_ChangedLanguage { language } {
    Ermes::ModifyMenus ;#to customize again the menu re-created for the new language
}
 
proc GiD_Event_AfterWriteCalculationFile { filename errorflag } {   
    if { ![info exists gid_groups_conds::doc] } {
        WarnWin [= "Error: data not OK"]
        return
    }    
    set err [catch { Ermes::WriteCalculationFile $filename } ret]
    if { $err } {       
        WarnWin [= "Error when preparing data for analysis (%s)" $::errorInfo]
        set ret -cancel-
    }
    return $ret
}

#################################################
#      namespace implementing procedures        #
#################################################
namespace eval Ermes { 
    variable problemtype_dir 
}

proc Ermes::SetDir { dir } {  
    variable problemtype_dir
    set problemtype_dir $dir
}

proc Ermes::GetDir { } {  
    variable problemtype_dir
    return $problemtype_dir
}

proc Ermes::ModifyMenus { } {   
    if { [GidUtils::IsTkDisabled] } {  
        return
    }          
    foreach menu_name {Conditions Interval "Interval Data" "Local axes"} {
        GidChangeDataLabel $menu_name ""
    }       
    GidAddUserDataOptions --- 1    
    GidAddUserDataOptions [= "Data tree"] [list GidUtils::ToggleWindow CUSTOMLIB] 2
    set x_path {/*/container[@n="Properties"]/container[@n="materials"]}
    GidAddUserDataOptions [= "Import/export materials"] [list gid_groups_conds::import_export_materials .gid $x_path] 3
    GiDMenu::UpdateMenus
}

######################################################################
# example procedures asking GiD_Info and doing things with GiD_Process
proc Ermes::CreateWindow { } {  
    if { [GidUtils::AreWindowsDisabled] } {
        return
    }  
    if { [GiD_Info geometry NumSurfaces] > 0 } {
        #only offer to create a new random surface if there is no more surfaces in the current model
        return
    }
    set w .gid.win_example
    InitWindow $w [= "Ermes.TCL - Example tcl file"] PreExampleErmesWindowGeom "" "" 1
    if { ![winfo exists $w] } return ;# windows disabled || usemorewindows == 0
    ttk::frame $w.top -style ridge.TFrame
    ttk::label $w.top.title_text -text [= "TCL window example for Ermes problem type"] -font BigFont
    ttk::frame $w.information -style ridge.TFrame
    label $w.information.help -text [= "This problemtype allows the user to compute the center of mass of a given 2D geometry. \
      \nThe geometry can be generated by the user or a random surface can be created"]
    $w.information.help configure -wraplength 320 -justify left
    ttk::frame $w.bottom -style BottomFrame.TFrame
    ttk::button $w.bottom.start  -style BottomFrame.TButton \
	-text [= "Continue"] -command [list destroy $w]
    # ttk::button $w.bottom.random -text [= "Random surface"] -command [list Ermes::CreateRandomSurfaceAsk $w]
    ttk::button $w.bottom.random  -style BottomFrame.TButton \
	-text [= "Random surface"] -command \
	"Ermes::CreateRandomSurface; GiD_Process 'Zoom Frame escape escape escape; destroy $w"
    grid $w.top.title_text -sticky ew -padx 6 -pady 6
    grid $w.top -sticky new   
    grid $w.information.help -sticky we -padx 6 -pady 6
    grid $w.information -sticky nsew    
    grid $w.bottom.start $w.bottom.random -padx 6 -pady 12 -sticky ew
    grid $w.bottom -sticky sew
    if { $::tcl_version >= 8.5 } { grid anchor $w.bottom center }
    grid rowconfigure $w 0 -weight 1
    grid rowconfigure $w 1 -weight 1
    grid rowconfigure $w 2 -weight 1
    grid columnconfigure $w 0 -weight 1    
}

proc Ermes::CreateRandomSurfaceAsk {w} {
    set ret [tk_dialogRAM $w.dialog [= "Warning!!"] [= "Warning: this will create a nurbs surface in your current project"] "" 1 [= "Ok"] [= "Cancel"]]    
    if {$ret ==0} {
        destroy $w
        Ermes::CreateRandomSurface        
        GiD_Process 'Zoom Frame escape escape escape
    }
}

proc Ermes::CreateRandomSurface {} {
    set a_x [expr rand()*10]
    set a_y [expr rand()*10]    
    set b_x [expr $a_x+rand()*10]
    set b_y [expr $a_y+rand()*10]    
    set c_x [expr $b_x+rand()*10]
    set c_y [expr $b_y-rand()*10]    
    if {$a_y < $c_y} {
        set d_y [expr $a_y-rand()*10]
        set d_x [expr $a_x+rand()*10]
    } else {
        set d_y [expr $c_y-rand()*10] 
        set d_x [expr $c_x-rand()*10]
    }
    set next_line_id [GiD_Info Geometry MaxNumLines]
    GiD_Process Mescape Geometry Create Line $a_x,$a_y,0 $b_x,$b_y,0 $c_x,$c_y,0 $d_x,$d_y,0 close escape
    GiD_Process Mescape Geometry Create NurbsSurface [expr $next_line_id+1]:[expr $next_line_id+4] escape escape
    GiD_Process 'Zoom Frame
}

######################################################################
#  auxiliary procs invoked from the tree (see .spd xml description)
proc Ermes::GetMaterialsList { domNode args } {    
    set x_path {//container[@n="materials"]}
    set dom_materials [$domNode selectNodes $x_path]
    if { $dom_materials == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    }
    set image material
    set result [list]
    foreach dom_material [$dom_materials childNodes] {
        set name [$dom_material @name] 
        lappend result [list 0 $name $name $image 1]
    }
    return [join $result ,]
}

proc Ermes::EditDatabaseList { domNode dict boundary_conds args } {
    set has_container ""
    set database materials    
    set title [= "User defined"]      
    set list_name [$domNode @n]    
    set x_path {//container[@n="materials"]}
    set dom_materials [$domNode selectNodes $x_path]
    if { $dom_materials == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    }
    set primary_level material
    if { [dict exists $dict $list_name] } {
        set xps $x_path
        append xps [format_xpath {/blockdata[@n=%s and @name=%s]} $primary_level [dict get $dict $list_name]]
    } else { 
        set xps "" 
    }
    set domNodes [gid_groups_conds::edit_tree_parts_window -accepted_n $primary_level -select_only_one 1 $boundary_conds $title $x_path $xps]          
    set dict ""
    if { [llength $domNodes] } {
        set domNode [lindex $domNodes 0]
        if { [$domNode @n] == $primary_level } {      
            dict set dict $list_name [$domNode @name]
        }
    }
    return [list $dict ""]
}

###################################################################################
#      print data in the .dat calculation file (instead of a classic .bas template)
proc Ermes::WriteCalculationFile { filename } {
    customlib::InitWriteFile $filename
    set elements_conditions [list "Shells"]
    # This instruction is mandatory for using materials
    customlib::InitMaterials $elements_conditions active
    customlib::WriteString "=================================================================="
    customlib::WriteString "                        General Data File"    
    customlib::WriteString "=================================================================="
    customlib::WriteString "Units:"
    customlib::WriteString "length [gid_groups_conds::give_active_unit L] mass [gid_groups_conds::give_active_unit M]"
    customlib::WriteString "Number of elements and nodes:"
    customlib::WriteString "[GiD_Info Mesh NumElements] [GiD_Info Mesh NumNodes]"    
    customlib::WriteString ""
    customlib::WriteString "................................................................."    
    #################### COORDINATES ############################ 
    set units_mesh [gid_groups_conds::give_mesh_unit]
    customlib::WriteString ""
    customlib::WriteString "Coordinates:"
    customlib::WriteString "  Node        X $units_mesh               Y $units_mesh"
    # Write all nodes of the model, and it's coordinates
    # Check documentation to write nodes from an specific condition
    
    # 2D case
    customlib::WriteCoordinates "%5d %14.5e %14.5e%.0s\n"
    # Example for 3D case
    #customlib::WriteCoordinates "%5d %14.5e %14.5e %14.5e\n"
    #################### CONNECTIVITIES ############################    
    customlib::WriteString ""
    customlib::WriteString "................................................................."
    customlib::WriteString ""
    customlib::WriteString "Connectivities:"
    customlib::WriteString "    Element    Node(1)   Node(2)   Node(3)     Material"
    set element_formats [list {"%10d" "element" "id"} {"%10d" "element" "connectivities"} {"%10d" "material" "MID"}]
    customlib::WriteConnectivities $elements_conditions $element_formats active 
    #################### MATERIALS ############################
    set num_materials [customlib::GetNumberOfMaterials used]
    customlib::WriteString ""
    customlib::WriteString "................................................................."
    customlib::WriteString ""
    customlib::WriteString "Materials:"
    customlib::WriteString $num_materials
    customlib::WriteString "Material      Surface density [gid_groups_conds::give_active_unit M/L^2]"
    customlib::WriteMaterials [list {"%4d" "material" "MID"} {"%13.5e" "material" "Density"}] used active
    #################### CONCENTRATE WEIGHTS ############################
    customlib::WriteString ""
    customlib::WriteString "................................................................."
    customlib::WriteString ""
    set condition_list [list "Point_Weight"]
    set condition_formats [list {"%1d" "node" "id"} {"%13.5e" "property" "Weight"}]
    set number_of_conditions [customlib::GetNumberOfNodes $condition_list]
    customlib::WriteString "Concentrate Weights:"
    customlib::WriteString $number_of_conditions
    customlib::WriteString "Node   Mass [gid_groups_conds::give_active_unit M]"
    customlib::WriteNodes $condition_list $condition_formats "" active
    customlib::EndWriteFile ;#finish writting
}

#procedure that draw a square to represent the Weight condition
proc Ermes::DrawSymbolWeigth { values_list } {  
    variable _opengl_draw_list
    if { ![info exists _opengl_draw_list(weight)] } {
        set _opengl_draw_list(weight) [GiD_OpenGL draw -genlists 1]
        GiD_OpenGL draw -newlist $_opengl_draw_list(weight) compile
        set filename_mesh [file join [Ermes::GetDir] symbols weight_2d.msh]
        gid_groups_conds::import_gid_mesh_as_openGL $filename_mesh black blue	
        GiD_OpenGL draw -endlist
    }
    set weigth_and_unit [lrange [lindex $values_list [lsearch -index 0 $values_list Weight]] 1 2]
    set weigth [lindex $weigth_and_unit 0]
    set scale [expr {$weigth*0.1}]
    set transform_matrix [list $scale 0 0 0 0 $scale 0 0 0 0 $scale 0 0 0 0 1]
    set list_id [GiD_OpenGL draw -genlists 1]
    GiD_OpenGL draw -newlist $list_id compile
    GiD_OpenGL draw -pushmatrix -multmatrix $transform_matrix
    GiD_OpenGL draw -call $_opengl_draw_list(weight)
    GiD_OpenGL draw -popmatrix
    GiD_OpenGL draw -endlist
    return $list_id
}
